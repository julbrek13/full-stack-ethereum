/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SimpleStorageInterface extends ethers.utils.Interface {
  functions: {
    "addPerson(string,uint256)": FunctionFragment;
    "nameToFavoriteNumber(string)": FunctionFragment;
    "people(uint256)": FunctionFragment;
    "retrieve()": FunctionFragment;
    "store(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPerson",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameToFavoriteNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "people",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "retrieve", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addPerson", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameToFavoriteNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "people", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;

  events: {};
}

export class SimpleStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SimpleStorageInterface;

  functions: {
    addPerson(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPerson(string,uint256)"(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nameToFavoriteNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nameToFavoriteNumber(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    people(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { favoriteNumber: BigNumber; name: string }
    >;

    "people(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { favoriteNumber: BigNumber; name: string }
    >;

    retrieve(overrides?: CallOverrides): Promise<[BigNumber]>;

    "retrieve()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    store(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "store(uint256)"(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPerson(
    _name: string,
    _favoriteNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPerson(string,uint256)"(
    _name: string,
    _favoriteNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nameToFavoriteNumber(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nameToFavoriteNumber(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  people(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { favoriteNumber: BigNumber; name: string }>;

  "people(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { favoriteNumber: BigNumber; name: string }>;

  retrieve(overrides?: CallOverrides): Promise<BigNumber>;

  "retrieve()"(overrides?: CallOverrides): Promise<BigNumber>;

  store(
    _favoriteNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "store(uint256)"(
    _favoriteNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPerson(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPerson(string,uint256)"(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nameToFavoriteNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nameToFavoriteNumber(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    people(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { favoriteNumber: BigNumber; name: string }
    >;

    "people(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { favoriteNumber: BigNumber; name: string }
    >;

    retrieve(overrides?: CallOverrides): Promise<BigNumber>;

    "retrieve()"(overrides?: CallOverrides): Promise<BigNumber>;

    store(
      _favoriteNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "store(uint256)"(
      _favoriteNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addPerson(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPerson(string,uint256)"(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nameToFavoriteNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nameToFavoriteNumber(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    people(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "people(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieve(overrides?: CallOverrides): Promise<BigNumber>;

    "retrieve()"(overrides?: CallOverrides): Promise<BigNumber>;

    store(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "store(uint256)"(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPerson(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPerson(string,uint256)"(
      _name: string,
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nameToFavoriteNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nameToFavoriteNumber(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    people(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "people(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "retrieve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    store(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "store(uint256)"(
      _favoriteNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
